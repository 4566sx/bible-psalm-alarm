name: 构建 Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 设置 Android SDK
      run: |
        # 设置 Android SDK 环境变量
        export ANDROID_HOME=$HOME/android-sdk
        export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin
        export PATH=$PATH:$ANDROID_HOME/platform-tools
        
        # 创建 SDK 目录
        mkdir -p $ANDROID_HOME/cmdline-tools
        
        # 下载并安装 Android SDK Command Line Tools
        cd $ANDROID_HOME/cmdline-tools
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        unzip -q commandlinetools-linux-9477386_latest.zip
        mv cmdline-tools latest
        
        # 接受许可证并安装必要的 SDK 组件
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0"
        
        # 设置环境变量到 GitHub Actions 环境
        echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
        echo "$ANDROID_HOME/cmdline-tools/latest/bin" >> $GITHUB_PATH
        echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH
        
    - name: 缓存 Gradle 依赖
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: 创建 Gradle Wrapper
      run: |
        # 使用 Gradle 8.0 创建 wrapper
        gradle wrapper --gradle-version 8.0
        
    - name: 赋予 gradlew 执行权限
      run: chmod +x gradlew
      
    - name: 创建必要的目录结构
      run: |
        mkdir -p app/src/main/java/com/biblealarm/app
        mkdir -p app/src/main/res/layout
        mkdir -p app/src/main/res/values
        mkdir -p app/src/main/res/drawable
        mkdir -p app/src/main/res/raw
        
    - name: 移动源文件到正确位置
      run: |
        # 移动 Java 源文件
        mv *.java app/src/main/java/com/biblealarm/app/ 2>/dev/null || true
        
        # 移动资源文件
        mv res/layout/* app/src/main/res/layout/ 2>/dev/null || true
        mv res/values/* app/src/main/res/values/ 2>/dev/null || true
        mv res/drawable/* app/src/main/res/drawable/ 2>/dev/null || true
        mv res/raw/* app/src/main/res/raw/ 2>/dev/null || true
        
        # 移动 AndroidManifest.xml
        mv AndroidManifest.xml app/src/main/ 2>/dev/null || true
        
        # 创建 app 目录下的 build.gradle
        mv build.gradle app/ 2>/dev/null || true
        
    - name: 创建项目根目录的 build.gradle
      run: |
        cat > build.gradle << 'EOF'
        buildscript {
            repositories {
                google()
                mavenCentral()
            }
            dependencies {
                classpath 'com.android.tools.build:gradle:8.1.4'
            }
        }
        
        allprojects {
            repositories {
                google()
                mavenCentral()
            }
        }
        
        task clean(type: Delete) {
            delete rootProject.buildDir
        }
        EOF
        
    - name: 创建 settings.gradle
      run: |
        echo "include ':app'" > settings.gradle
        
    - name: 创建 gradle.properties
      run: |
        cat > gradle.properties << 'EOF'
        android.useAndroidX=true
        android.enableJetifier=true
        org.gradle.jvmargs=-Xmx4g -Dfile.encoding=UTF-8
        org.gradle.parallel=true
        org.gradle.caching=true
        android.nonTransitiveRClass=false
        android.defaults.buildfeatures.buildconfig=true
        android.nonFinalResIds=false
        EOF
        
    - name: 创建本地属性文件
      run: |
        echo "sdk.dir=$ANDROID_HOME" > local.properties
        
    - name: 构建 Debug APK
      run: ./gradlew assembleDebug --stacktrace
      
    - name: 上传 APK 文件
      uses: actions/upload-artifact@v4
      with:
        name: 圣经诗篇闹钟-debug-apk
        path: app/build/outputs/apk/debug/app-debug.apk
        
    - name: 创建发布版本（如果是标签推送）
      if: startsWith(github.ref, 'refs/tags/')
      run: ./gradlew assembleRelease --stacktrace
      
    - name: 上传发布版 APK
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-artifact@v4
      with:
        name: 圣经诗篇闹钟-release-apk
        path: app/build/outputs/apk/release/app-release-unsigned.apk
